-- =================================================================
--          SimpliBiz - Supabase SQL Schema
-- =================================================================
-- This script sets up the database tables, relationships, and
-- security policies for the SimpliBiz application.
-- It is designed for PostgreSQL and Supabase.
-- =================================================================

-- =================================================================
-- Table: categories
-- Purpose: Stores product categories created by users.
-- =================================================================
CREATE TABLE public.categories (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  name TEXT NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Comment: A simple table for users to organize their products.


-- =================================================================
-- Table: products
-- Purpose: The core table for inventory management.
-- =================================================================
CREATE TABLE public.products (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  category_id BIGINT REFERENCES public.categories(id) ON DELETE SET NULL,
  name TEXT NOT NULL,
  image_url TEXT, -- This will store the URL from Supabase Storage
  selling_price NUMERIC NOT NULL CHECK (selling_price >= 0),
  cost_price NUMERIC NOT NULL CHECK (cost_price >= 0),
  stock INT NOT NULL DEFAULT 0 CHECK (stock >= 0),
  low_stock_threshold INT NOT NULL DEFAULT 0 CHECK (low_stock_threshold >= 0),
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Comment: Storing cost_price is crucial for future financial tracking.
-- The category_id is set to NULL if a category is deleted, so the product isn't lost.


-- =================================================================
-- Table: sales
-- Purpose: Records each completed sales transaction.
-- =================================================================
CREATE TABLE public.sales (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  total_amount NUMERIC NOT NULL CHECK (total_amount >= 0),
  total_cost NUMERIC NOT NULL CHECK (total_cost >= 0), -- For profit calculation
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Comment: Storing total_cost on the sale makes profit analysis for a period much faster.


-- =================================================================
-- Table: sale_items
-- Purpose: A junction table linking products to a sale.
-- =================================================================
CREATE TABLE public.sale_items (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  sale_id BIGINT REFERENCES public.sales(id) ON DELETE CASCADE NOT NULL,
  product_id BIGINT REFERENCES public.products(id) ON DELETE SET NULL,
  quantity INT NOT NULL CHECK (quantity > 0),
  price_at_sale NUMERIC NOT NULL, -- Price of the product when it was sold
  cost_at_sale NUMERIC NOT NULL   -- Cost of the product when it was sold
);

-- Comment: Storing price_at_sale and cost_at_sale is VITAL. It ensures that
-- historical sales reports remain accurate even if the product's current price changes.


-- =================================================================
-- Table: expenses (For future financial tracking)
-- Purpose: Allows users to log business expenses.
-- =================================================================
CREATE TABLE public.expenses (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  description TEXT NOT NULL,
  amount NUMERIC NOT NULL CHECK (amount > 0),
  category TEXT,
  expense_date DATE NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Comment: This table is ready for when you want to build the finance/money tracking feature.
-- It's structured to be simple but powerful.


-- =================================================================
--          ROW LEVEL SECURITY (RLS) POLICIES
-- =================================================================
-- These policies are essential to ensure that users can only
-- access and manage their own data.

-- 1. Enable RLS on all tables
ALTER TABLE public.categories ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.products ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.sales ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.sale_items ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.expenses ENABLE ROW LEVEL SECURITY;

-- 2. Create policies for CATEGORIES
CREATE POLICY "Users can manage their own categories"
ON public.categories FOR ALL
USING (auth.uid() = user_id);

-- 3. Create policies for PRODUCTS
CREATE POLICY "Users can manage their own products"
ON public.products FOR ALL
USING (auth.uid() = user_id);

-- 4. Create policies for SALES
CREATE POLICY "Users can manage their own sales"
ON public.sales FOR ALL
USING (auth.uid() = user_id);

-- 5. Create policies for SALE_ITEMS
-- This one is slightly different: a user can access a sale_item if they own the parent sale.
CREATE POLICY "Users can manage items in their own sales"
ON public.sale_items FOR ALL
USING (
  (SELECT user_id FROM public.sales WHERE id = sale_id) = auth.uid()
);

-- 6. Create policies for EXPENSES
CREATE POLICY "Users can manage their own expenses"
ON public.expenses FOR ALL
USING (auth.uid() = user_id);

-- =================================================================
--          END OF SCRIPT
-- =================================================================
